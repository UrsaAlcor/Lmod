Bootstrap: localimage
From: static-lua.sif
Stage: setup


%setup
test -d .git # Assert we are building from the Git root directory.
mkdir -p     "${SINGULARITY_ROOTFS}/cvmfs/config.mila.quebec/lmod/recipes"
tar -cf - --exclude=./lmod/recipes --exclude="*.sif" --exclude="build-temp-*" . | \
tar -xf - -C "${SINGULARITY_ROOTFS}/cvmfs/config.mila.quebec"
cd           "${SINGULARITY_ROOTFS}/cvmfs/config.mila.quebec"
git clean -xdff


%post
#
# Install packages for a decent BuildRoot bootstrap, plus a few select
# utilities for debugging, plus dependencies for Lmod build.
#
apk update  -U
apk upgrade -U --available
apk add     -U alpine-sdk git coreutils findutils ncurses-dev strace nano \
               file patch less grep perl rsync bash zsh tcsh fish procps \
               linux-headers util-linux python3 meson
git config --global advice.detachedHead false


#
# Install static Lua(c) at correct location and create symlinks and wrappers of
# various kinds.
#
export LMOD_PREFIX="/cvmfs/config.mila.quebec"
export LMOD_ROOT="${LMOD_PREFIX}/lmod"
export LMOD_CONFIG_PREFIX="${LMOD_ROOT}/etc/lmod"
export LMOD_MODULE_ROOT="${LMOD_ROOT}/modulefiles"
export LUA_PREFIX="${LMOD_ROOT}/lua"
mkdir -p      "$LUA_PREFIX"
mv /opt/lua*  "$LUA_PREFIX"
cd            "$LUA_PREFIX"
for LUA_NAME in lua[!c]*; do
  LUAC_NAME=luac${LUA_NAME#lua}
  LUA_NOARCH_NAME=${LUA_NAME%.*}
  LUAC_NOARCH_NAME=${LUAC_NAME%.*}
  ln -s $LUA_NAME $LUAC_NAME
  # In the following wrapper scripts, $LUA_PREFIX, $LUA_NOARCH_NAME and $LUAC_NOARCH_NAME
  # are statically evaluated, but the uname -m is evaluated dynamically on every invocation!
  echo -e "#!/bin/sh\nexec \"$LUA_PREFIX/$LUA_NOARCH_NAME.\$(uname -m)\" \"\$@\"" > \
                            "$LUA_PREFIX/$LUA_NOARCH_NAME"
  echo -e "#!/bin/sh\nexec \"$LUA_PREFIX/$LUAC_NOARCH_NAME.\$(uname -m)\" \"\$@\"" > \
                            "$LUA_PREFIX/$LUAC_NOARCH_NAME"
  chmod 755                 "$LUA_PREFIX/$LUA_NOARCH_NAME" \
                            "$LUA_PREFIX/$LUAC_NOARCH_NAME"
done


#
# Prepare and install Lmod to its final location.
#
# The environment variables LD_LIBRARY_PATH and LD_PRELOAD are unset because
# they are completely useless (our Lua build is fully statically linked), yet
# the installation script still records these (strangely enough) and within a
# Singularity %post section these variables contain "magic" directories proper
# to Singularity itself.
#
cd "${LMOD_PREFIX}"
meson subprojects download
cd "${LMOD_PREFIX}/subprojects/lmod"
./configure --help
env -u LD_LIBRARY_PATH -u LD_PRELOAD \
./configure --prefix="${LMOD_PREFIX}" \
            --with-lua="${LUA_PREFIX}/${LUA_NOARCH_NAME}" \
            --with-luac="${LUA_PREFIX}/${LUAC_NOARCH_NAME}" \
            --with-tcl=no \
            --with-module-root-path="" \
            --with-ModulePathInit="${LMOD_CONFIG_PREFIX}/modulespath" \
            --with-shortTime=3600 \
            --with-availExtensions=yes \
            --with-caseIndependentSorting=no \
            --with-colorize=yes \
            --with-useDotFiles=yes
make install &> /dev/null


#
# Clean up Meson caches and subproject checkouts (which are fully reproducible)
#
cd "${LMOD_PREFIX}"
meson subprojects purge --confirm
rm -Rf subprojects/packagecache


#
# Final step: Hook up the various shells to make use of Lmod using short shell
# scripts that source our etc/. The generated shell scripts are:
#   - /etc/profile.d/z00-lmod.sh      (for sh,bash,ash,dash,zsh)
#   - /etc/profile.d/z00-lmod.csh     (for csh,tcsh)
#   - /etc/fish/conf.d/z00-lmod.fish  (for fish)
# The shell scripts are careful to preinitialize MODULEPATH to the correct
# arch-dependent root module path, as the modulespath init file is incapable
# of doing so (and is therefore empty).
#
cat << EOF > /etc/profile.d/z00-lmod.sh
if [ -r "${LMOD_ROOT}/lmod/init/profile" ]; then
    MODULEPATH="${LMOD_MODULE_ROOT}"/\`uname -m\`
    export MODULEPATH
    .   "${LMOD_ROOT}/lmod/init/profile"
    for f in "\${LMOD_ROOT}/etc/profile.d"/*.sh; do
        if [ -r "\$f" ]; then
            .   "\$f"
        fi
    done
fi
EOF
cat << EOF > /etc/profile.d/z00-lmod.csh
if ( -r    "${LMOD_ROOT}/lmod/init/cshrc" ) then
    setenv MODULEPATH "${LMOD_MODULE_ROOT}"/\`uname -m\`
    source "${LMOD_ROOT}/lmod/init/cshrc"
    foreach f ("\${LMOD_ROOT}/etc/profile.d"/*.csh)
        if ( -r    "\$f" ) then
            source "\$f"
        endif
    end
endif
EOF
cat << EOF > /etc/fish/conf.d/z00-lmod.fish
if test -r "$LMOD_ROOT/lmod/init/profile.fish"
    set -gx MODULEPATH "${LMOD_MODULE_ROOT}"/(uname -m)
    source "$LMOD_ROOT/lmod/init/profile.fish"
    for f in "\$LMOD_ROOT/etc/fish/conf.d"/*.fish
        if test -r "\$f"
            source "\$f"
        end
    end
end
EOF



Bootstrap: docker
From: ubuntu:18.04
Stage: final


%files from setup
/cvmfs
/etc/profile.d/z00-lmod.sh
/etc/profile.d/z00-lmod.csh    /etc/csh/login.d/z00-lmod.csh
/etc/fish/conf.d/z00-lmod.fish



%environment
#
# Defeat Singularity's imposition of the --norc flag when Bash is invoked.
#
# Instead impose the -l (--login) flag, which forces a read of
# /etc/profile, which does exist and sources the scripts we
# need it to.
#
# Inspired from https://github.com/hpcng/singularity/issues/5541#issuecomment-683905623
#
case "${0##*/}" in
shell)
    if   [ "${SINGULARITY_SHELL:-}" = "/bin/bash" ]; then
        set -- -l
    elif [ "${SINGULARITY_SHELL:-}" = "/bin/sh" ]; then
        set -- -l
    elif [ "${SINGULARITY_SHELL:-}" = "/bin/ash" ]; then
        set -- -l
    elif [ "${SINGULARITY_SHELL:-}" = "/bin/dash" ]; then
        set -- -l
    elif [ "${SINGULARITY_SHELL:-}" = "/bin/zsh" ]; then
        set -- -l
    elif [ "${SINGULARITY_SHELL:-}" = "/bin/csh" ]; then
        set -- -l
    elif [ "${SINGULARITY_SHELL:-}" = "/bin/tcsh" ]; then
        set -- -l
    elif [ "${SINGULARITY_SHELL:-}" = "/usr/bin/fish" ]; then
        set -- -l
    elif test -z "${SINGULARITY_SHELL:-}"; then
        export SINGULARITY_SHELL=/bin/bash
        set -- -l
    fi
    ;;
esac


%post
# The container-image version of this file excludes all man-pages!
rm -f /etc/dpkg/dpkg.cfg.d/excludes

# Install what's needed.
apt-get update  -y
apt-get upgrade -y
apt-get install -y dialog perl libterm-readline-gnu-perl locales apt-utils \
                   man man-db manpages manpages-dev manpages-posix manpages-posix-dev \
                   software-properties-common
apt-add-repository ppa:fish-shell/release-3
apt-get install -y bash bash-doc bash-completion zsh zsh-doc zsh-common \
                   csh tcsh fish fish-common less procps grep nano
echo "emulate sh -c 'source /etc/profile'" > /etc/zsh/zprofile
